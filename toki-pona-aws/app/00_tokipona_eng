import streamlit as st
import random
from PIL import Image
from manga_ocr import MangaOcr
import os
from streamlit_drawable_canvas import st_canvas

# Constants for Toki Pona
TOKI_PONA_WORDS = [
    "mi", "sina", "ona", "ni", "pona", "ike", "suli", "lili", "kama", "tawa",
    "moku", "tomo", "jan", "wile", "sona", "lukin", "kepeken", "lon", "tan", "sama"
]

def change_word() -> None:
    """Change the current Toki Pona word."""
    st.session_state.current_word = random.choice(TOKI_PONA_WORDS)
    return

def change_mode(new_mode: str) -> None:
    """Change the practice mode (Basic/Advanced sitelen pona)."""
    st.session_state.mode = new_mode
    st.session_state.current_word = random.choice(TOKI_PONA_WORDS)
    return

def recognize_character(mocr: MangaOcr) -> str:
    """Recognize the sitelen pona drawn by the user using OCR."""
    character_file_path = os.path.join(os.getcwd(), "result.png")
    if not os.path.exists(character_file_path):
        raise FileNotFoundError(f"The file {character_file_path} does not exist.")
    img = Image.open(character_file_path)
    text = mocr(img)
    return text.strip()

# Streamlit page configuration
st.set_page_config(
    page_title="sitelen pona practice",
    page_icon="üìù"
)

st.title("üìù o kama sona e sitelen pona!")  # Learn sitelen pona
st.subheader("o sitelen e nimi lon lipu ni!")  # Practice writing on this page
st.divider()

# Initialize session state variables
if 'mode' not in st.session_state:
    st.session_state.mode = None
if 'mocr' not in st.session_state:
    st.session_state.mocr = MangaOcr(pretrained_model_name_or_path="/models/manga-ocr")
if "current_word" not in st.session_state:
    st.session_state.current_word = random.choice(TOKI_PONA_WORDS)

# Mode selection radio buttons
new_mode = st.radio(
    "sina wile sitelen e seme?",  # What do you want to practice?
    ["sitelen pona lili", "sitelen pona suli"],  # Basic/Advanced sitelen pona
    horizontal=True
)

# Update the mode if changed
if new_mode != st.session_state.mode:
    change_mode(new_mode)

# Display the current word
st.subheader(st.session_state.current_word)

# Button to load a new word
st.button("o ante e nimi", on_click=change_word)  # Change word

# Instructions for the user
st.write(f"o sitelen e nimi '{st.session_state.current_word}' lon poka anpa:")  # Write the word below

# Drawing canvas for sitelen pona input
with st.form("sitelen_form", clear_on_submit=True):
    canvas_result = st_canvas(
        fill_color="rgba(255, 165, 0)",
        stroke_width=6,
        stroke_color="#000000",
        background_color="#FFFFFF",
        background_image=None,
        height=300,
        point_display_radius=0,
        key="full_app",
    )
    
    file_path = "result.png"
    submitted = st.form_submit_button("pana")  # Submit
    
    if submitted:
        # Save the user's drawing
        img_data = canvas_result.image_data
        im = Image.fromarray(img_data.astype("uint8"), mode="RGBA")
        im.save(file_path, "PNG")
        
        # Use OCR to recognize the character
        try:
            user_result = recognize_character(st.session_state.mocr)
            
            # Note: This is a simplified validation since OCR might need to be
            # specifically trained for sitelen pona recognition
            if user_result.lower() == st.session_state.current_word:
                st.success(f'pona! sina sitelen e "{st.session_state.current_word}" pona!', icon="‚úÖ")
                st.balloons()
            else:
                st.error(f'ike. ni li nimi "{st.session_state.current_word}". sina sitelen e "{user_result}"', icon="üö®")
        except Exception as e:
            st.error(f"ike. mi ken ala lukin e sitelen sina: {str(e)}")

# Footer with tips
st.divider()
st.markdown("""
    üí° **sona pona:**
    - o sitelen suli
    - o sitelen pimeja
    - o awen pona
    """)